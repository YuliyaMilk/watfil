[{"C:\\Users\\lenovo\\Desktop\\watfil\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Favorite\\Favorite.jsx":"2","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\MainPage\\MainPage.jsx":"3","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Auth\\Auth.jsx":"4","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\UI\\Card\\Card.jsx":"5","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\brandname\\BrandName.jsx":"6","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\FilmInfo\\FilmInfo.jsx":"7","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\slider\\SliderAuto.jsx":"8","C:\\Users\\lenovo\\Desktop\\watfil\\src\\App.js":"9","C:\\Users\\lenovo\\Desktop\\watfil\\src\\reportWebVitals.js":"10","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\menu\\Menu.jsx":"11","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Films\\Films.jsx":"12","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Serials\\Serials.jsx":"13","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\filter\\Filter.jsx":"14","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\MainPage\\Content\\Content.jsx":"15","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\profileHeader\\ProfileHeader.jsx":"16"},{"size":500,"mtime":1606515838677,"results":"17","hashOfConfig":"18"},{"size":3504,"mtime":1607522435051,"results":"19","hashOfConfig":"18"},{"size":442,"mtime":1607199422654,"results":"20","hashOfConfig":"18"},{"size":4019,"mtime":1607199422592,"results":"21","hashOfConfig":"18"},{"size":1629,"mtime":1607513116379,"results":"22","hashOfConfig":"18"},{"size":173,"mtime":1606594614937,"results":"23","hashOfConfig":"18"},{"size":8497,"mtime":1607546746104,"results":"24","hashOfConfig":"18"},{"size":2705,"mtime":1607545151095,"results":"25","hashOfConfig":"18"},{"size":2049,"mtime":1607252082538,"results":"26","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"27","hashOfConfig":"18"},{"size":604,"mtime":1607199422504,"results":"28","hashOfConfig":"18"},{"size":4209,"mtime":1607518680849,"results":"29","hashOfConfig":"18"},{"size":4337,"mtime":1607518699159,"results":"30","hashOfConfig":"18"},{"size":3234,"mtime":1607520722888,"results":"31","hashOfConfig":"18"},{"size":291,"mtime":1606594219141,"results":"32","hashOfConfig":"18"},{"size":441,"mtime":1607199422516,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1hsv3gf",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lenovo\\Desktop\\watfil\\src\\index.js",[],["74","75"],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Favorite\\Favorite.jsx",["76"],"import classes from \"./Favorite.module.css\";\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport Card from \"../../components/UI/Card/Card\";\r\nimport Filter from \"../../components/filter/Filter\";\r\n\r\nclass Favorite extends React.Component {\r\n\r\n  state = {\r\n    cards: [],\r\n    filter: null\r\n  }\r\n\r\n  _isMounted = false;\r\n\r\n  addMovie = async (type) => {\r\n    this._isMounted &&  this.setState({\r\n      filter: type,\r\n    });\r\n  };\r\n\r\n  deleteMovie = async () => {\r\n    this._isMounted &&  this.setState({\r\n      filter: null,\r\n    });\r\n  };\r\n\r\n  deleteFavorite = async(favoriteId, isMovie) => {\r\n    let response = await Axios.post(\r\n      \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/deletefavorite\",\r\n      {\r\n        email: localStorage.getItem(\"email\"),\r\n        movie_id: favoriteId,\r\n        movie: isMovie\r\n      }\r\n    );\r\n    response = JSON.parse(response.data);\r\n    if (response.status === \"success\") {\r\n      let newFav = this.state.cards.slice();\r\n      for(const card of this.state.cards) {\r\n        if(card.id === favoriteId) {\r\n          newFav.splice(this.state.cards.indexOf(card), 1);\r\n          break;\r\n        }\r\n      }\r\n      this._isMounted && this.setState({\r\n        cards: newFav,\r\n      });\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    let fav = await Axios.get(\r\n      \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/fetchfavorites\");\r\n    fav = JSON.parse(fav.data);\r\n    if(fav.status === 'success') {\r\n      let cardsArr = []\r\n      for(const item of fav.data) {\r\n        if(item.user_primary === localStorage.getItem('email')) {\r\n          let card;\r\n          if(item.movie) {\r\n            card = await Axios.get(\r\n              \"https://api.themoviedb.org/3/movie/\"+item.movie_id+\"?api_key=623a2eda649fb02dee401196f0a282c9&language=ru\")\r\n          }\r\n          else {\r\n            card = await Axios.get(\r\n              \"https://api.themoviedb.org/3/tv/\"+item.movie_id+\"?api_key=623a2eda649fb02dee401196f0a282c9&language=ru\")\r\n          }\r\n          card = card.data;\r\n          cardsArr.push(\r\n            card\r\n          )\r\n        }\r\n      };\r\n      this._isMounted && this.setState({\r\n        cards: cardsArr\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div className={classes.FavoritePage}>\r\n        <div className={classes.Filters}>\r\n         <Filter\r\n           type=\"Favorite\"\r\n           filter={this.state.filter}\r\n           addMovie={this.addMovie}\r\n           deleteMovie={this.deleteMovie}\r\n         />\r\n       </div>\r\n        \r\n        <div className={classes.Favorite}>\r\n\r\n          {this.state.cards.map(card => {\r\n            let isMovie = card.title ? 1 : 0;\r\n            if(this.state.filter === null || this.state.filter === isMovie )\r\n            return <Card \r\n              style = {{'width': '30%'}}\r\n              titleFont = '1.3em'\r\n              descriptionFont = '0.6em'\r\n              key={card.id}\r\n              id = {card.id}\r\n              isMovie = {card.title ? true : false}\r\n              title={card.title ? card.title : card.name}\r\n              overview={card.overview}\r\n              favorite = {true}\r\n              deleteFavorite = {this.deleteFavorite}\r\n              poster={\r\n                \"https://image.tmdb.org/t/p/w500\" + card.poster_path\r\n            }/>;\r\n          }) }\r\n         \r\n        </div>\r\n</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Favorite;\r\n",["77","78"],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\MainPage\\MainPage.jsx",["79"],"import React from \"react\";\r\nimport classes from \"./MainPage.module.css\";\r\nimport Header from \"./Header/Header\";\r\nimport Content from \"./Content/Content\";\r\n\r\nclass MainPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={classes.MainPage}>\r\n        <Header signOut = {this.props.signOut} name = {this.props.user.nickname}/>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Auth\\Auth.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\UI\\Card\\Card.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\brandname\\BrandName.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\FilmInfo\\FilmInfo.jsx",["80"],"import classes from \"./FilmInfo.module.css\";\r\nimport React from \"react\";\r\nimport Axios from \"axios\";\r\nimport SliderAuto from \"../../components/slider/SliderAuto\";\r\nimport Slider from \"react-slick\";\r\n\r\nclass FilmInfo extends React.Component {\r\n  film = null;\r\n  videoKey = null;\r\n  seasons = [];\r\n  state = {\r\n    film: null,\r\n    videoKey: null,\r\n    favorites: [],\r\n    favorite: false,\r\n    seasons: []\r\n  };\r\n\r\n  _isMounted = false;\r\n\r\n  addFavorite = async (favoriteId, isFav, isMovie) => {\r\n    if (isFav) {\r\n      let response = await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/addfavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: isMovie,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        this.setState({\r\n          favorites: [...this.state.favorites, favoriteId],\r\n          favorite: true,\r\n        });\r\n      }\r\n    } else {\r\n      let response = await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/deletefavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: isMovie,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        let newFav = this.state.favorites.slice();\r\n        newFav.splice(this.state.favorites.indexOf(favoriteId), 1);\r\n        this.setState({\r\n          favorites: newFav,\r\n          favorite: false,\r\n        });\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    if(this.props.location.state) {\r\n      this.id = this.props.location.state.id;\r\n      this.isMovie = this.props.location.state.isMovie;\r\n    }\r\n    if (this.isMovie) {\r\n      this.film = await Axios.get(\r\n        \"https://api.themoviedb.org/3/movie/\" +\r\n          this.id +\r\n          \"?api_key=623a2eda649fb02dee401196f0a282c9&language=ru\"\r\n      );\r\n      this.videoKey = \r\n      (await Axios.get( \"https://api.themoviedb.org/3/movie/\"+this.id+\"/videos?api_key=623a2eda649fb02dee401196f0a282c9&language=en\")).data.results\r\n    \r\n    } else {\r\n      this.film = await Axios.get(\r\n        \"https://api.themoviedb.org/3/tv/\" +\r\n          this.id +\r\n          \"?api_key=623a2eda649fb02dee401196f0a282c9&language=ru\"\r\n      );\r\n\r\n      this._isMounted &&\r\n      this.setState({\r\n        seasons: this.film.data.seasons,\r\n      });\r\n      \r\n      this.videoKey = \r\n    (await Axios.get( \"https://api.themoviedb.org/3/tv/\"+this.id+\"/videos?api_key=623a2eda649fb02dee401196f0a282c9&language=en\")).data.results \r\n    \r\n    }\r\n    this.film = this.film.data;\r\n    this._isMounted &&\r\n      this.setState({\r\n        film: this.film,\r\n        videoKey: this.videoKey\r\n      });\r\n\r\n\r\n      let fav = await Axios.get(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/fetchfavorites\"\r\n      );\r\n      fav = JSON.parse(fav.data);\r\n      if (fav.status === \"success\") {\r\n        let curFav = [];\r\n        fav.data.map((item) => {\r\n          if (\r\n            item.user_primary === localStorage.getItem(\"email\") &&\r\n            item.movie\r\n          ) {\r\n            curFav.push(parseInt(item.movie_id));\r\n          }\r\n        });\r\n        this._isMounted &&  this.setState({\r\n          favorites: [...this.state.favorites, ...curFav],\r\n          favorite: [...this.state.favorites, ...curFav].indexOf(this.id) !== -1,\r\n        });\r\n      }\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    const settings = {\r\n      dots: true,\r\n      infinite: false,\r\n      speed: 500,\r\n      slidesToShow: 6,\r\n      slidesToScroll: 3\r\n    };\r\n\r\n\r\n    let rating = [];\r\n    if (this.state.film) {\r\n      let rate = parseInt(this.state.film.vote_average);\r\n      for (let i = 0; i < rate; ++i) {\r\n        rating.push(\r\n          <i\r\n            key={i}\r\n            className=\"fa fa-star\"\r\n            aria-hidden=\"true\"\r\n            style={{color: \"#ffda00\"}}\r\n            />\r\n        );\r\n      }\r\n      for (let i = 0; i < 10 - rate; ++i) {\r\n        rating.push(\r\n          <i\r\n            key={rate + i}\r\n            className=\"fa fa-star-o\"\r\n            aria-hidden=\"true\"\r\n            style={{color: \"white\"}}\r\n            />\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <div className={classes.FilmInfo}>\r\n        {this.state.film ? (\r\n          <div className={classes.BlackBackground}>\r\n          <div className={classes.Page}>\r\n            <div className={classes.Image}>\r\n              <img\r\n                  style={{border: \"2px solid yellow\"}}\r\n                  src={\r\n                    \"https://image.tmdb.org/t/p/w200\" +\r\n                    this.state.film.poster_path\r\n                  }\r\n                  alt = \"poster\"\r\n                  />\r\n            </div>\r\n            <div className={classes.TextInfo}>\r\n              <div className={classes.Title}>\r\n                {this.isMovie ? this.state.film.title : this.state.film.name}\r\n                <div onClick = {() => {\r\n                    this.addFavorite(this.id, !this.state.favorite, this.isMovie)\r\n                  }\r\n                  }>\r\n                  {!this.state.favorite ? (\r\n                    <div className={classes.AddFavorite}> В избранное </div>\r\n                  ) : (\r\n                    <div className={classes.AddFavorite} style = {{'color': 'black' , 'background': '#ffda00'}}> В избранном </div>\r\n                  )}\r\n                </div>\r\n                \r\n              </div>\r\n              <div className={classes.Rating}>\r\n                {rating.map((rate) => {\r\n                  return rate;\r\n                })}\r\n              </div>\r\n              <div className={classes.Description}>\r\n                {this.state.film.overview}\r\n                <div className={classes.Release}>\r\n                  Дата релиза: {this.isMovie ? this.state.film.release_date : this.state.film.first_air_date}\r\n                </div>\r\n                <div className={classes.Status}>\r\n                  Статус: {this.state.film.status}\r\n                </div>\r\n                {this.state.film.tagline ? (\r\n                  <div className={classes.Tagline}>\r\n                    Слоган: {this.state.film.tagline}\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              {(this.state.videoKey[0]) ? (\r\n              <iframe\r\n                    title={this.id}\r\n                    style = {{border: \"2px solid yellow\", 'marginTop': \"20px\"}}\r\n                    width=\"560\"\r\n                    height=\"315\"\r\n                    src={\"https://www.youtube.com/embed/\" + this.state.videoKey[0].key}\r\n                    frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                    allowFullScreen\r\n                    />)\r\n                : null}\r\n              \r\n           </div>\r\n                \r\n        \r\n          </div>\r\n          {(this.isMovie || !this.state.seasons) ? (<div></div>) : (<div className={classes.Text}>Сезоны</div>)}\r\n          {(this.isMovie || !this.state.seasons) ? (<div></div>) : (\r\n            \r\n            <Slider {...settings} className={classes.Seasons}>\r\n                {this.state.seasons.map((season, index) => {\r\n                  return(\r\n                    <div className={classes.Season}  key={index}>\r\n                       <div className={classes.TitleSeason}>\r\n                          {season.name}\r\n                       </div>\r\n                    \r\n                      <div className={classes.Image}>\r\n                        <img\r\n                            style={{border: \"2px solid yellow\"}}\r\n                            src={\r\n                              \"https://image.tmdb.org/t/p/w200\" +\r\n                              season.poster_path\r\n                            }\r\n                            alt = \"poster_season\"\r\n                            />\r\n                      </div>\r\n                      </div>\r\n                  );\r\n                })}\r\n            </Slider>\r\n          )\r\n          \r\n          }  \r\n          <SliderAuto movie_id={this.id} isMovie = {this.isMovie} className={classes.SliderAuto}/>\r\n          </div>\r\n          \r\n        ) : null}\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmInfo;\r\n","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\slider\\SliderAuto.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\App.js",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\reportWebVitals.js",[],["81","82"],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\menu\\Menu.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Films\\Films.jsx",["83","84"],"import classes from \"./Films.module.css\";\r\nimport React from \"react\";\r\nimport Card from \"../../components/UI/Card/Card\";\r\nimport Filter from \"../../components/filter/Filter\";\r\nimport Axios from \"axios\";\r\n// key = 623a2eda649fb02dee401196f0a282c9\r\nclass Films extends React.Component {\r\n  state = {\r\n    films: [],\r\n    genres: [],\r\n    favorites: [],\r\n  };\r\n\r\n  _isMounted = false;\r\n\r\n  addGenre = async (id) => {\r\n    this._isMounted &&  this.setState({\r\n      genres: [...this.state.genres, id],\r\n    });\r\n  };\r\n\r\n  deleteGenre = async (id) => {\r\n    let newGenres = this.state.genres.slice();\r\n    newGenres.splice(this.state.genres.indexOf(id), 1);\r\n    this._isMounted &&  this.setState({\r\n      genres: newGenres,\r\n    });\r\n  };\r\n\r\n  addFavorite = async (favoriteId, isFav) => {\r\n    if (isFav) {\r\n      let response = await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/addfavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: true,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        this.setState({\r\n          favorites: [...this.state.favorites, favoriteId],\r\n        });\r\n      }\r\n    } else {\r\n      let response = await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/deletefavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: true,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        let newFav = this.state.favorites.slice();\r\n        newFav.splice(this.state.favorites.indexOf(favoriteId), 1);\r\n        this.setState({\r\n          favorites: newFav,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      for (let i of [1, 2, 3]) {\r\n        const res = (\r\n          await Axios.get(\r\n            \"https://api.themoviedb.org/3/movie/popular?api_key=623a2eda649fb02dee401196f0a282c9&language=ru&page=\" +\r\n              i\r\n          )\r\n        ).data.results;\r\n        this._isMounted && this.setState({\r\n          films: [...this.state.films, ...res],\r\n        });\r\n      }\r\n\r\n      let fav = await Axios.get(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/fetchfavorites\"\r\n      );\r\n      fav = JSON.parse(fav.data);\r\n      if (fav.status === \"success\") {\r\n        let curFav = [];\r\n        fav.data.map((item) => {\r\n          if (\r\n            item.user_primary === localStorage.getItem(\"email\") &&\r\n            item.movie\r\n          ) {\r\n            curFav.push(parseInt(item.movie_id));\r\n          }\r\n        });\r\n        this._isMounted && this.setState({\r\n          favorites: [...this.state.favorites, ...curFav],\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Films}>\r\n        <div className={classes.FilmCards}>\r\n          {this.state.films.map((film) => {\r\n            let isGood = true;\r\n            for (const genre of this.state.genres) {\r\n              if (film.genre_ids.indexOf(genre) === -1) {\r\n                isGood = false;\r\n                break;\r\n              }\r\n            }\r\n            if (isGood) {\r\n              return (\r\n                <Card\r\n                  key={film.id}\r\n                  id={film.id}\r\n                  title={film.title}\r\n                  overview={film.overview}\r\n                  isMovie={true}\r\n                  favorite={this.state.favorites.indexOf(film.id) !== -1}\r\n                  addFavorite={this.addFavorite}\r\n                  poster={\"https://image.tmdb.org/t/p/w500\" + film.poster_path}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n        <div className={classes.Filters}>\r\n          <Filter\r\n            type=\"genres\"\r\n            genres={this.state.genres}\r\n            addGenre={this.addGenre}\r\n            deleteGenre={this.deleteGenre}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Films;\r\n","C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\Serials\\Serials.jsx",["85","86"],"import classes from \"./Serials.module.css\";\r\nimport React from \"react\";\r\nimport Card from \"../../components/UI/Card/Card\";\r\nimport Filter from \"../../components/filter/Filter\";\r\nimport Axios from \"axios\";\r\n\r\nclass Serials extends React.Component {\r\n  state = {\r\n    serials: [],\r\n    genres: [],\r\n    favorites: [],\r\n  };\r\n\r\n  _isMounted = false;\r\n\r\n  addGenre = async (id) => {\r\n    this._isMounted &&\r\n      (await this.setState({\r\n        genres: [...this.state.genres, id],\r\n      }));\r\n  };\r\n\r\n  deleteGenre = async (id) => {\r\n    let newGenres = this.state.genres.slice();\r\n    newGenres.splice(this.state.genres.indexOf(id), 1);\r\n    this._isMounted &&\r\n      (await this.setState({\r\n        genres: newGenres,\r\n      }));\r\n  };\r\n\r\n  addFavorite = async (favoriteId, isFav) => {\r\n    if (isFav) {\r\n      let response = this._isMounted && await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/addfavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: false,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        this.setState({\r\n          favorites: [...this.state.favorites, favoriteId],\r\n        });\r\n      }\r\n    } else {\r\n      let response = this._isMounted && await Axios.post(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/deletefavorite\",\r\n        {\r\n          email: localStorage.getItem(\"email\"),\r\n          movie_id: favoriteId,\r\n          movie: false,\r\n        }\r\n      );\r\n      response = JSON.parse(response.data);\r\n      if (response.status === \"success\") {\r\n        let newFav = this.state.favorites.slice();\r\n        newFav.splice(this.state.favorites.indexOf(favoriteId), 1);\r\n        this._isMounted && this.setState({\r\n          favorites: newFav,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      for (let i of [1, 2, 3]) {\r\n        const res = (\r\n          await Axios.get(\r\n            \"https://api.themoviedb.org/3/tv/popular?api_key=623a2eda649fb02dee401196f0a282c9&language=ru&page=\" +\r\n              i\r\n          )\r\n        ).data.results;\r\n        this._isMounted && this.setState({\r\n          serials: [...this.state.serials, ...res],\r\n        });\r\n      }\r\n\r\n      let fav = await Axios.get(\r\n        \"https://km0lr02nsg.execute-api.us-east-1.amazonaws.com/user/fetchfavorites\"\r\n      );\r\n      fav = JSON.parse(fav.data);\r\n      if (fav.status === \"success\") {\r\n        let curFav = [];\r\n        fav.data.map((item) => {\r\n          if (\r\n            item.user_primary === localStorage.getItem(\"email\") &&\r\n            !item.movie\r\n          ) {\r\n            curFav.push(parseInt(item.movie_id));\r\n          }\r\n        });\r\n        this._isMounted && this.setState({\r\n          favorites: [...this.state.favorites, ...curFav],\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.Serials}>\r\n        <div className={classes.SerialsCard}>\r\n          {this.state.serials.map((serial) => {\r\n            let isGood = true;\r\n            for (const genre of this.state.genres) {\r\n              if (serial.genre_ids.indexOf(genre) === -1) {\r\n                isGood = false;\r\n                break;\r\n              }\r\n            }\r\n            if (isGood) {\r\n              return (\r\n                <Card\r\n                  key={serial.id}\r\n                  id={serial.id}\r\n                  title={serial.name}\r\n                  isMovie={false}\r\n                  overview={serial.overview}\r\n                  favorite={this.state.favorites.indexOf(serial.id) !== -1}\r\n                  poster={\r\n                    \"https://image.tmdb.org/t/p/w500\" + serial.poster_path\r\n                  }\r\n                  addFavorite={this.addFavorite}\r\n                />\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n        <div className={classes.Filters}>\r\n          <Filter\r\n            type=\"genres\"\r\n            genres={this.state.genres}\r\n            addGenre={this.addGenre}\r\n            deleteGenre={this.deleteGenre}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Serials;\r\n","C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\filter\\Filter.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\containers\\MainPage\\Content\\Content.jsx",[],"C:\\Users\\lenovo\\Desktop\\watfil\\src\\components\\profileHeader\\ProfileHeader.jsx",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":101,"column":38,"nodeType":"93","messageId":"94","endLine":101,"endColumn":40},{"ruleId":"87","replacedBy":"95"},{"ruleId":"89","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":4,"column":8,"nodeType":"99","messageId":"100","endLine":4,"endColumn":15},{"ruleId":"91","severity":1,"message":"101","line":105,"column":29,"nodeType":"93","messageId":"102","endLine":105,"endColumn":31},{"ruleId":"87","replacedBy":"103"},{"ruleId":"89","replacedBy":"104"},{"ruleId":"91","severity":1,"message":"101","line":87,"column":29,"nodeType":"93","messageId":"102","endLine":87,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":110,"column":40,"nodeType":"93","messageId":"94","endLine":110,"endColumn":42},{"ruleId":"91","severity":1,"message":"101","line":89,"column":29,"nodeType":"93","messageId":"102","endLine":89,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":112,"column":44,"nodeType":"93","messageId":"94","endLine":112,"endColumn":46},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["105"],["106"],"no-unused-vars","'Content' is defined but never used.","Identifier","unusedVar","Array.prototype.map() expects a return value from arrow function.","expectedInside",["105"],["106"],"no-global-assign","no-unsafe-negation"]